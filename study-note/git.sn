Git是目前世界上最先进的分布式版本控制系统（没有之一）。
Git跟踪并管理的是修改，而非文件。

mkdir  d:\cjo\git
cd  d:\cjo\git
touch  a.md

# 工作区（Working Directory）
d:\cjo\git
# 版本库（Repository）
d:\cjo\git\.git
## stage(index)：暂存区，用git add命令添加
## master，用git commit把暂存区的所有内容添加到当前分支
## HEAD：指向master的一个指针

## 注：在进行任何 Git 操作之前，都要先切换到 Git 仓库目录，也就是先要先切换到项目的文件夹目录下。

## 初始化仓库
git init

## 查看状态
git status

## 添加文件，先将文件放到缓冲区
git add a.md
git add study-note
git add .
<<<<<<< HEAD
=======

# 删除文件
rm test  # os
git rm test
git commit -m "remove test file"
<<<<<<< HEAD
>>>>>>> study
=======
>>>>>>> 3053e4ce81b9c318872927ca8889a3bfb9b27714
>>>>>>> d89dfaf356ba7dc73f9f9a7d17b995996f11a76f

## 修改配置文件
git config --global user.email "CJo_126@126.com"
git config --global user.name  "CongJun"
## 查看配置信息
git config -l

# 提交第一次修改
git commit -m "first commit"
## 追加提交，修改内容，但不想增加一个新的commit id，修改当前提交的提交信息
git commit --amend

# 查看所有产生commit的记录
git log
## 查看分支合并情况
git log --graph --pretty=oneline --abbrev-commit
## 查看每次提交所做的修改
git log -p
## 查看每次提交差异的统计信息
git log --stat


# 查看/创建/删除分支
分支其实就是时间线；
git中的主分支是master，master指向提交；
HEAD指向当前分支；
合并分支其实就是提交后将master指向新的提交；
删除分支就是把指向该分支的指针删除掉；
git branch
git branch study
git branch -d study
## 如果还没有合并就删除用-D
git branch -D study



## 查看/创建 版本
git tag
git tag v0.1

# checkout 用于从历史提交或缓冲区拷贝文件到工作目录，也可用于切换分支
# checkout 快照与reset –hard的区别就是：checkout是可恢复，reset是不可恢复（后期会删除仓库中的文件，checkout不会）
## 切换分支/版本
git checkout study
git checkout v0.1
## 创建并切换到分支b1
git checkout -b b1

## 修改了f2（f2不是新创建的文件），但还没有添加到缓冲区，取消修改
git checkout  f2

## 将HEDA指向的提交f2文件拷贝到文件目录和暂存区
git checkout HEAD f2
## 将HEDA指向的父提交f2文件拷贝到文件目录和暂存区
git checkout HEAD~1 f2
## 将某个commit id指向的f2拷贝到文件目录和暂存区
git checkout commit_id f2
<<<<<<< HEAD

# 查看文件f1有哪些修改
## 查看文件f1工作区和缓冲区有什么修改
git  diff  f1
## 查看文件f1缓冲区和当前版本有什么区别
git  diff  --cached
## 查看文件f1工作区和当前版本有什么区别
git  diff  HEAD
## 查看文件f1两个提交版本有什么区别
git  diff  commit_id1   commit_id2
## 查看分支b1和工作区有什么区别
git  diff  b1


=======
## 创建一个新分支并切换到该分支
git checkout -b newbranch
## 丢弃工作区的修改(文件已经有过commit，后来修改还没有add)
git checkout -- study-note\git.sn
## 把暂存区的修改撤销掉（unstage），重新放回工作区(已add,还没有commit，没有add的无法checkout)
git reset HEAD study-note\git.sn

## 合并其他分支到master分支
git merge
# 注：当前分支必须是master
## 用Fast forward模式合并
git merge study
## 用非Fast forward模式合并
git merge --no-ff -m "Merge with non Fast-forward modes" study


# 查看有哪些修改
git  diff  study-note\git.sn
## 查看git.sn文件在工作区和版本库的区别
git  diff  HEAD  --  study-note\git.sn

# 把当前分支的指针（HEAD）移动到指定位置，并且有选择的变动工作区，默认跟着修改缓冲区
# --hard：移动指针，并复制文件到工作区，如没此参数则不修改工作区
# --soft：只移动指针，不修改工作区和缓冲区。
## 指针不动，但将当前仓库中的内容复制到缓冲区
git reset HEAD
## 指针不动，将当前仓库中的内容复制到缓冲区和工作区
git reset HEAD --hard
## 移动指针到当前指针的祖父位置，将当前仓库中的f2文件内容复制到缓冲区
git reset HEAD~2  f2
##  移动指针到指定commit id位置，将commit id仓库中的文件内容复制到缓冲区
git reset commit_id
##  移动指针到指定commit id位置，将commit id仓库中的文件内容复制到缓冲区和工作区
git reset --hard commit_id
##  只移动指针到指定commit id位置，不复制任何文件
git reset --soft commit_id


# 查看执行过了每一条命令（可以查找commit id）
git reflog


# 生成id_rsa和id_rsa.pub
ssh-keygen -t rsa -C "CJo_126@126.com"
## 注：将id_rsa.pub文件的内容添加到https://github.com/中
# 创建一个新的仓库learngit99
## 配置好好哦检测ssh到github的连通
ssh -vT git@github.com
如果返回最后有：client_loop: send disconnect: Broken pipe
  vim  ~/.ssh/config
  添加
  Host *
      ServerAliveInterval 600
      TCPKeepAlive yes
      IPQoS=throughput


# 关联一个远程库
git remote add origin git@github.com:CongJun/learngit99.git
origin：远程库的名字，git的默认叫法，可以更换
CongJun：GitHub上的用户名
learngit99：GitHub上创建的仓库（repo）

# 第一次推送master/study分支的所有内容
git push -u origin master
git push -u origin study
## 以后推送master/study分支的所有内容
git push origin master
git push origin study

<<<<<<< HEAD
>>>>>>> study

=======
# 从远程克隆一个库
git clone git@github.com:CongJun/learngit99.git
>>>>>>> d89dfaf356ba7dc73f9f9a7d17b995996f11a76f

# 查看远程库信息
git remote
## 查看具体的推送/拉取地址
git remote -v
## 推送具体的分支
git push git@github.com:CongJun/learngit99.git master
git push git@github.com:CongJun/learngit99.git study


# cmder内建图形化git工具
gitk


c:
mkdir c:\CJo\origin\i3wm-config
cd c:\CJo\origin\i3wm-config
git init
git config --global user.email "CJo_126@126.com"
git config --global user.name  "CongJun"
git remote add origin git@github.com:CongJun/i3wm-config.git
git remote -v
git fetch origin   #可能不是必须的
git pull origin master


创建了文件f1，f1还未添加到缓冲区（还未执行：git add f1）
-> touch f1
## f1是新文件，从未提交（commit）过
<- rm f1
## f1已经有过commit，已经有内容你哦个，后来修改过但没有git add
<- git restore  f1
<- git checkout -- f1

创建了文件f1，f1添加到缓冲区（执行了：git add f1）
-> git add f1
<- git rm --cached  f1
<- git restore  --staged  f1

git reset HEAD study-note\git.sn




