
:set  hlsearch    # 高亮显示
:set  nohlsearch    # 不高亮显示
:map <C-n> :nohl<cr>    #定义快捷键Ctrl+n为查找后取消高亮显示
:scriptname     产看vim相关脚本
:edit ~/.vimrc  编辑.vimrc脚本
:help  keycodes
:browse  oldfile    查看历史文件访问列表
q:     进入历史命令编辑，可以直接修改命令后回车执行。
        将当前行定位到需要执行的命令上按Ctrl+c
q/     进入历史命令搜索窗口

打开，保存、关闭文件       /*{{{*/
  :vsp  d:\data.txt    # 垂直分割屏幕，并打开文件data.txt
  :x    # 等价于:wq
  ZZ    # 等价于:wq
  :w  !sudo tee %    # 普通用户编辑root的文件后的保存方法。
  :saveas  path/filename    # 文件另存为

  :earlier  20s    # 将当前文件的状态返回到20秒前
  :later  20s    # 将当前文件的状态返回到20秒后，在使用过earlier后可以使用这条指令
  :undol[ist]    # 查看当前文件的修改记录

  单窗口多文件操作    /*{{{*/
    vim  file1 file2 file3    # 同时打开3个文件
    :args    # 显示当前编辑的[文件]及所打开的文件
    :buffers    # 显示当前所有的buffer
    :buffer 2    # 编辑第二个buffer的文件，注意buffer后没s
    :bd    # 关闭当前的buffer
    :next/prev    # 切换到"下/上"一个文件
    :next !/prev !    # 不保存对当前文件的编辑切换到"下/上"一个文件
    :first    # 定位到首文件
    :last    # 定位到尾文件
    ctrl + ^    # 快速在最近打开的两个文件间切换
    :all    # 将打开的文件在一个窗口中横向分隔全部显示
    :vertical all    # 将打开的文件在一个窗口中垂直分隔全部显示
    :only    # 同一个窗口中分隔显示的所有文件最大化当前文件（最后只剩一个区域）

    vim  -o  file1 file2 file3    # 水平分割打开3个文件
    vim  -O  file1 file2 file3    # 垂直分割打开3个文件
    :new    # 已打开一个文件，横向分割屏幕新创建一个文件
    :vnew    # 已打开一个文件，纵向分割屏幕新创建一个文件
    ctrl+w --> hjkl    # 在多个buffer中"左下上右"移动
    :sp[lit]    # 将当前文件水平分割
    :sp[lit]  file   # 将当前窗口水平分割，并打开file文件
    :vsp[lit]    # 将当前文件垂直分割
    :vsp[lit]  file   # 将当前窗口垂直分割，并打开file文件


  单窗口多文件操作    end/*}}}*/

end-打开，保存、关闭文件       /*}}}*/

关键字        /*{{{*/
  ^  行首
  $  行尾
  \d：匹配一个数字
  \d\+：匹配连续多个数字
 
  '<,'>    #代表我们所选中的区域
  .  匹配一个字符
 [^\x00-\xff]    #代表一个汉字
  \(.\)  匹配任意一个字符
  \(.*\)  匹配任意个字符
  \1  匹配前面第一个找到的结果
  \2  匹配前面第二个找到的结果
  \zs    #指明匹配由此开始
  \ze    #指明匹配到此为止
  \=    #后面是一个表达式
  line(".")    #当前光标所在行行号
  line("'<")    #所选区域中第一行行号

  需要转义的字符，在需要转义的字符前加上转义字符反斜杠\
  /
  $
  "
  ~
end-关键字       /*}}}*/

可视模式       /*{{{*/
  v  启动可视模式
  V  选择一行
  Ctrl+q  windows环境下启动列可视模式
  Ctrl+v  linux环境下启动列可视模式
  o  在可视模式下，移动光标到左上角
  O  在可视模式下，移动光标到右下角
end-可视模式       /*}}}*/

光标移动       /*{{{*/
  确定当前位置：
    Ctrl + G
    :set number  /  :set nonumber
    :set ruler
  滚屏：
    Ctrl + U ：向下滚动半屏
    Ctrl + F ：向下滚动一屏
    Ctrl + D ：向上滚动半屏
    Ctrl + B ：向上滚动一屏
    zt ：将光标所在行移动到屏幕顶
    zz ：将光标所在行移动到屏幕中间
    zb ：将光标所在行移动到屏幕底部
  词移动
    w  移动到下一个词首
    e  移动到下一个词尾
    b  移动到前一个词首
    ge 移动到前一个词尾
  段移动（空格回车分割）
    W  移动到下一段首
    E  移动到下一段尾
    B  移动到句首
    gB 段尾
  行移动
    ^     # 移动到行首第一个非空字符
    0     # 移动到行首
    $     # 移动到行尾
    g_    # 移动到行尾最后一个非空字符
    3$ 向下移到3行的末尾
  折叠：
    [z：移动到折叠的开始处
    z]：移动到折叠的结束处
    zj：向下移动，到达下一个折叠开始处
    zk：向上移动，到达上一个折叠开始处
end-光标移动       /*}}}*/

查找       /*{{{*/
  :set hlsearch/nohlsearch  是否高亮显示查找结果
  :set incsearch  输入关键字时就查找

  fx  在一行内向后查找x，并将光标移动过去；
  Fx  在一行内向前查找x，并将光标移动过去；
    ;  继续查找    ,  反向查找

  *  向下查找光标当前的单词（单词之间用空格分开）
  #  向上查找光标当前的单词（单词之间用空格分开）

  /keyword  查找keyword，向下查找
  ?keyword  查找keyword，向上查找
    n  继续向下查找；  xn  向下查找第x个
    N  继续向上查找；  xN  向上查找第x个
    :set ignorecase    忽略大小写
    :set noignorecase  不忽略大小写

  /the\>    查找the结尾的词或单个the
  /\<the    查找the开始的词或单个the
  /\<the\>  只查找单个the
  /^$       查找空行
  /t.e      查找the，tee等
  \(\<\w\+\>\)\_s*\1    查找重复连续的单词（用空格分隔）

  /str1\|str2  同时查找str1关键字和str2关键字

  vim默认为贪婪匹配模式，使用\(.*\)
  如果使用非贪婪匹配模式用.\{-}关键字
  如：将：This is a red book. This is a yellow book. This is a blue book. This is a green book.
      替换为：TB. TB. TB. TB.
      %s/This.\{-}book/TB/g

      %s/This\(.*\)book/TB/g
      替换为TB.


end-查找       /*}}}*/

替换       /*{{{
  :s/old/new    #在一行内将第一个old替换为new
  :s/old/new/g    #在一行内将所有old替换为new
  :3,21s/old/new/g    #将第3行到21行所有的old替换为new
  :%s/old/new/    #只替换每行的第一个old为new
  :%s/old/new/g    #替换所有的old为new
  :%s/old/new/gc    #替换所有的old为new，替换前需要确认
  :%s/\w//gn    #查看有多少个单词，n是只报告不替换
  :%s/啊//gn    #查看有多少个啊，n是只报告不替换

  12,28s/a/b/g   将12行到28行之间的a替换为b
  gu   转换为小写
  gU   转换为大写
  \1：代表匹配的第一个通配符
  \2：代表匹配的第二个通配符
  %s/A\(.*\)B/A---B/g    # 将A开头B结尾中间不定的字符串全部替换为A---B
  %s/A\(.*\)B/C\1D/g    # 将A开头B结尾中间不定的字符串全部替换为：C中间和原来一样D
  %s/月\(\d\\)日/月0\1日/g    # 将2016年6月2日替换为2016年6月02日
  %s/年\(\d\\)月\(\d\\)日/年0\1月0\2日/g    # 将2016年6月2日替换为2016年06月02日
  %s/[^\x00-\xff]//g    #将文中所有汉字替换为空
  :ab  str1  str2    #在输入过程中，凡是输入str1后自动替换为str2
  :ab  si  I love you!    #在输入si后，将si自动替换为I love you!
end-替换       /*}}}*/

修改、删除、插入        /*{{{*/
  This is test
  This is test
  c  修改当前光标位置的字符，完成后切换到插入模式
  cw   先删除当前光标位置单词，然后切换到插入模式
  c3w  先删除当前光标及其后面的3个单词，然后切换到插入模式
  ce   先删除当前光标位置单词，然后切换到插入模式
  cc/S  从第一个非空字符开始删除到行尾，然后切换到插入模式（保留缩进）
  c$   从光标当前位置删除到行尾，然后切换到插入模式

  x  删除当前光标的字符
  xp  互换两个字符位置
  X  删除光标左边的字符
  D  删除到行尾
  C  删除到行尾，然后切换到插入模式
  s/cl  删除当前光标字符，然后切换到插入模式
  r  替换当前光标字符
  3r 连续替换3个字符

  :g/pattern/d    #找到包含pattern的行，删除该行
  :v/pattern/d    #找到不包含pattern的行，删除该行
  :g/.*/mo0    #文本行逆序化
  :3,.d    #从第3行删除到当前行
  :.,9d    #从当前行删除到第9行
  :3,.+3d    #从第3行删除到当前行后的第3行
  :3,.-4d    #从第3行删除到当前行前的第4行
 
  :r !date /t   插入当前日期
end-修改、删除、插入        /*}}}*/

复制、粘贴        /*{{{*/
  yw  复制一个单词，包括单词后的空格
  y3w  复制三个单词，包括单词后的空格
  ye  复制一个单词，不包括单词后的空格
  yy  复制一行
  Y   复制一行

  使用剪贴板
  "+y  复制选择内容到剪贴板，注意是三个字符，双引号"和+号还有字符y
  Shift + Insert  粘贴，可以在不同文件间粘贴
end-复制、粘贴        /*}}}*/

多标签        /*{{{*/
vim默认最多打开10个标签，可以修改  :set tabpagemax=15
配置标签栏 :set showtabline=[1,2,3] =0完全不显示标签栏，=1只有用户新建时才显示，=2总是显示标签栏。
http://blog.csdn.net/fuxingdaima/article/details/8658342
进入vim前
  vim -p <filename>   以多标签的形式打开文件
  vim -p *   以多标签的形式打开当前目录下所有文件
vim编辑中
  :tabnew   增加一个标签
  :tabc     关闭当前标签
  :tabo     关闭所有其他标签
  :tabs     查看所有打开tab
  :tabp 或gT 前一个
  :tabn 或gt 后一个
新建标签
  :tabe  filename  在新标签中打开指定文件
  :tabnew  filename  在新标签中创建新文件
  :tab  split  在新标签中打开当前缓冲区内容，即复制当前窗口
  :tabf  filename  搜索当前目录，打开匹配文件
列出所有打开的标签页
  :tabs  + 表示修改过的，> 表示当前所在的标签页
关闭标签页
  :tabc  关闭当前标签页
  :tabo  关闭所有其他标签页
切换标签页
  :tabn 或 gt  切换到下一个
  :tabp 或 Gt  切换到上一个
  :tabfirst  切换到第一个
  :tablast   切换到最后一个
移动标签页
  :tabm id  移动当前标签页到指定序号，标签页的序号是从0开始
多标签页命令
  :tabdo <command>
  :tabdo %s/face/ass/g  将多个文件中的face替换为ass。
end-多标签        /*}}}*/

折叠        /*{{{*/
  折叠方法
  :set fdm  查看当前的折叠方法
      折叠方法：
          manual：手工定义折叠
          indent：按缩进折叠
          expr：按表达式折叠
          syntax：用语法高亮折叠
          diff：按有无修改折叠
          marker：根据折叠标志
  :set foldcolumn=4  在窗口左边栏增加一列显示折叠（可以使用鼠标）
  :set foldopen=all  当光标飘过折叠时自动打开，无法自动关闭
  :set foldopen&  恢复默认值
  :set  foldmethod    查看当前折叠方法  
  :set  foldmarker    查看折叠记号

  zf 创建折叠

  zo 打开折叠
  zr 打开所有折叠
  zc 关闭折叠
  zm 关闭所有折叠

  zd  删除光标所在的折叠（仅支持manual和marker模式）
  zD  删除当前光标行下的所有的折叠
  zE  删除所有的折叠

  zn 禁止折叠功能
  zN 恢复折叠
  zi 禁止/恢复折叠

end-折叠        /*}}}*/

分割窗口        /*{{{*/
    :split 水平分割
    :split filename
    :new

    :vsplit  垂直分割
    :vsplit filename
    :vertical new
    :vnew

    vim -o file1 file2 file3  "将3个文件在3个窗口中打开，水平分割
    vim -O file1 file2 file3  "将3个文件在3个窗口中打开，垂直分割

    :sv  filename    "水平分割当前窗口，在上面打开文件
    :vs  filename    "垂直分割当前窗口，在左面打开文件

    Ctrl+w +  按完ctrl+w后在按+（笔记本是Shift +）当前窗口的高增加一行
    5 Ctrl+w +  先按数字5，再按ctrl+w，最后在按+（笔记本是Shift +），当前窗口的高增加5行
    Ctrl+w -  按完ctrl+w后在按-（笔记本是Shift -）当前窗口的高减少一行
    8 Ctrl+w -  先按数字8，再按ctrl+w，最后在按-（笔记本是Shift -），当前窗口的高减少8行

    Ctrl-w-w  循环在多个窗口间切换
    Ctrl-w h  到左边的窗口
    Ctrl-w l  到右边的窗口
    Ctrl-w k  到上边的窗口
    Ctrl-w j  到下边的窗口
    Ctrl-w t  到顶部的窗口
    Ctrl-w b  到底部的窗口

    Ctrl-w H  将当前窗口移到左边
    Ctrl-w L  将当前窗口移到右边
    Ctrl-w K  将当前窗口移到上边
    Ctrl-w J  将当前窗口移到下边

    :close  关闭当前窗口，但是阻止关闭最后一个窗口
    :only   关闭除当前之外所有窗口
    :wall   保存所有窗口
    :wqall  保存所有窗口并关闭
    :qall!
end-分割窗口        /*}}}*/

书签        /*{{{*/
  书签名必须是一个字符a-z
  ma  定义一个名为a的书签
  'a  跳转到名为a的书签
  ''  跳回原来位置
  :jumps  列出可以跳往位置列表
  :marks  取得书签列表

  Ctrl+O/Ctrl+I  跳转到较老的地方
end-书签        /*}}}*/

文件安全      /*{{{*/
  ggVGg?    # 对已输入内容"加密"，ggVG 使可视模式覆盖这个当前缓冲区。最后g?使用ROT13对整个区域进行编码。
  :X    # 大写的X，会提示你输入密码。
  :set key=    # 打开一个加密的文件后，输入set key=，可以取消密码。
文件安全      end/*}}}*/

便捷操作        /*{{{*/
  Ctrl+n    # 自动补全，会已前面输入过的单词为缓存
  Undo/Redo/*{{{*/
    u    # undo
    :redo    # redo
  Undo/Redo    end/*}}}*/
  文件比较    /*{{{*/
    打开file1
    :vsp  file2    # 使用分离模式打开第二个文件
    :diffthis    # 在第一个缓冲区里输入，Ctrl+w h/j，左右两个缓冲区中移动
    :diffthis    # 在第二个缓冲区里输入
    或者
    :windo  diffthis    # 不用在两个缓冲区中输入两遍diffthis，只要在一个缓冲区中输入就可以
  文件比较    end/*}}}*/
  宏        /*{{{*/
    将文件
    a0001.dfieojfeofje
    a0002.difje;grofg
    a0003.gioigja'ou983
    a0004.sof039j9fjjf
    修改为如下形式：
    a0001.dfieojfeofje
    c0001.
    a0002.difje;grofg
    c0002.
    a0003.gioigja'ou983
    c0003.
    a0004.sof039j9fjjf
    c0004.

    操作步骤：
    1、将光标停在第一行的a字符处。
    2、qa    # 开始录制一个名为a的宏
    3、选择并复制"0001."这5个字符。    # l --> v --> lllll --> y
    4、新建一行。    # o
    5、切换到插入模式并输入字符"c"。    # i --> c
    6、切换到命令模式然后在粘贴刚才复制的内容（0001.）。    # esc --> p
    7、将光标移动到下一行（第三行）第一列的位置。    # j --> 0
    8、q    # 结束宏"a"的录制
    9、3@a    # 使用刚才做好的宏


  宏     end/*}}}*/
便捷操作        end/*}}}*/

操作实例        /*{{{*/
  一、删除一个html中所有<B>标记/*{{{*/
    1. 先将光标定位到<上；
    2. df>  删除<B>;
    3. /<   找到下一个<;
    4. .    重复执行命令(df>)；
    5. n    查找下一个；
    6. .
  end/*}}}*/
  二、删除空格，空行/*{{{*/
    :%s/^\s\+//  #删除行首空格
    :%s/ *$//    #删除行尾空格
    :%s/\s\+$//  #删除行尾空格
    :%s/\s//g    #删除所有空格
    g/^\s*$/d    #删除空行
  end/*}}}*/
  三、在行首、行尾添加字符/*{{{*/
    :%s/^/abc/g  在行首添加abc
    :%s/$/abc/g  在行尾添加abc
  end/*}}}*/
  四、替换部分four为five/*{{{*/
    1、/four
    2、cwfive
    3、n  查找下一个four
    4、.  如果需要替换就循环执行cwfive
    5、n.n.n.n.  循环往复
  end/*}}}*/
五、合并有规律的行/*{{{*/
需要将以下内容：
    第一章
      内容内容内容内容
    第二章
      内容内容内容内容
转换为：
    第一章  内容内容内容内容
    第二章  内容内容内容内容
将章后的换行符（\n）替换为空格即可
:%s/章\n/章  /g
end/*}}}*/
六、给每个数字和空格后添加逗号/*{{{*/
223  223 963   943
13   124 39    1212
223,  223, 963,   943
13,   124, 39,    1212

:%s/\d /\0,/g  将 数字(\d)+空格 替换为数字+空格+,
:%s/ //g      删除所有空格
:%s/\d$/\0/g  如果需要的话可以给数字后加入逗号
end/*}}}*/
七、修改WWN号        /*{{{*/
给WWN号加冒号，将50014380330cc25c变为50:01:43:80:33:0c:c2:5c
\(\x\x\) 表示一对数字，如50
:%s/\(\x\x\)\(\x\x\)\(\x\x\)\(\x\x\)\(\x\x\)\(\x\x\)\(\x\x\)\(\x\x\)/\1:\2\:3:\4:\5:\6:\7:\8/
end-修改WWN号        /*}}}*/
八、每隔一行插入一个空行        /*{{{*/
将行尾的结束符（\n）替换为换行符（\r\r）
:%s/\n/\r\r/g
每隔一行插入一个空行         end/*}}}*/
九、插入等差数列        /*{{{*/
第1步：跳转到需要插入数列的左上角位置。
第2步：通过“块操作ctrl＋v(ctrl＋q)进入块操作。
第3步：假如需要插入30行，然后再键入29j，选中30列首字母。
第4步：然后执行命令：

:let i=1 | '<,'>g/^/ s//\=i.' '/ | let i+=1

(a) let {expression} 即赋值命令。let i=1 给变量 i 赋值 1。let i+=1 给变量 i 的值增加 1。
(b) | 在这里用来连接先后依次执行的命令。
(c) '<,'>指示的是命令作用域为所选中的文字。
(d) g/{pattern}/{command} 即global命令，一段为模式，一段为命令。
(e) 模式"^"即正则表达式的行首。
(f) s/{pattern}/{text}/{flags} 即substitude命令。s//\=i/ 的 {pattern} 为空，即默认当前模式，即 global 所给的模式“^”。{text} 为 \=i，即替换成 i 的值。省却了{flags}。
(g) i.' '   用 .来连接字符串（或者数字＋字符串）

插入等差数列    end     /*}}}*/
十、简单的算术运算            /*{{{*/
1、只需要知道计算结果
    ESC
    ：  Ctrl+r ---> = ---> 算式 ---> 回车
2、需要将计算结果插入到文本
    在插入模式下-- INSERT --
    将光标移动到需要插入结果的位置
    Ctrl+r ---> = ---> 算式 ---> 回车

简单的算术运算             end/*}}}*/
十一、将查找出来的结果导出到一个新文件中        /*{{{*/
1、清空缓冲区a
:let  @a=""
2、找到包含regex的行，用ex的ya命令复制到缓冲区a中
:g/regex/ya  A
3、打开一个新的窗口
:new
或
:tabnew
4、在新窗口中将缓冲区a的内容粘贴出来
"ap
十一、将查找出来的结果导出到一个新文件中     end/*}}}*/
十二、给每行之前添加序号     /*{{{*/
:let i=1 | g /^/  s//\=i." ."/| let i+=1
十二、给每行之前添加序号  end/*}}}*/
十三、将所有的数字替换为16进制       /*{{{*/
:%s/\d\+/\=printf("%X", submatch(0))/g
\d\+         #匹配一个或多个数字 (:help /\d  :help /\+ )
\=           #使用表达式的结果进行替换 (:help /\w )
printf       #按指定格式输出 (:help printf() )
submatch()   #返回:s命令中的指定匹配字符串 (:help submatch() )
十三、将所有的数字替换为16进制    end/*}}}*/
十四、将多个空格替换为一个/*{{{*/
:%s/\s\+/ /g
十四、将多个空格替换为一个/*}}}*/
十五、每个字符后面添加空格/*{{{*/
:%s/\s*/ /g
十五、每个字符后面添加空格/*}}}*/
十六、去除掉每个汉字前后的空格/*{{{*/
:%s/\([^\x00-\xff]\)  /\1/g
:%s/  \([^\x00-\xff]\)/\1/g
注：为了显示更明显，用两个空格代替一个空格
十六、每个字符后面添加空格/*}}}*/
十七、贪婪匹配模式和非贪婪匹配模式/*{{{*/
将：This is a red book. This is a yellow book. This is a blue book. This is a green book.
替换为：TB. TB. TB. TB.
%s/This.\{-}book/TB/g

%s/This\(.*\)book/TB/g
则替换为：TB.
十七、贪婪匹配模式和非贪婪匹配模式/*}}}*/

十八、把第3+1个This替换成THAT的通用写法/*{{{*/
This is a book. This is a book. This is a book. This is a book. This is a book. This is a book.
This is a book. This is a book. This is a book. THAT is a book. This is a book. This is a book.

:s/\%(\(This\).\{-}\)\{3}\zs\1/THAT/e
:s/\(\(This\).\{-}\)\{3}\zs\2/THAT/e

:h \%( #无计数分组
:h \{- #懒惰（非贪婪）匹配
:h \zs #零宽度开始位置匹配

懒惰匹配和零宽匹配在不同的正则引擎中写法不一样，上面的是vim的写法，无计数分组也可以换成普通的计数分组，后面\1改成\2就是了。
十八、把第3+1个This替换成THAT的通用写法/*}}}*/


十九、奶包大叔/*{{{*/
# 合并段落
%s/\([^ ]\)\n/\1/g
# 删除页脚行
g/奶包的大叔 2019 © All Ri/d
# 删除空格
%s/ \([^\x00-\xff]\)/\1/g
%s/\([^\x00-\xff]\) /\1/g
# 删除空行
g/^ $/d
g/^$/d
十九、奶包大叔/*}}}*/

end-操作实例        /*}}}*/


