七天精进企业篇马哥k8s    start/*{{{*/
01-Devops核心要点及kubernetes架构概述/*{{{*/
2020.9.20
Ansible
Docker
	docker compose：单机编排
	docker swarm：将多个docker host整合成一个逻辑的资源，compose可对这个整合过的资源编排。
	docker machine：将一台主机初始化为docker host，并满足加入swarm集群的条件。 预处理工具。
	以上三个是初期docker编排三剑客。
	
	mesos：idc的OS，把一个idc中所有的计算资源统一调度和分配。面向上层的接口不是容器接口，而只是资源分配工具，不能托管运行容器。
	marathon：结合mesos使用，管理容器；


DevOps，MicroServices，Blockchain
	CI：持续集成
	CD：持续交付，Delivery
	CD：持续部署，Deployment
DevOps是一种文化，一种运动，不是一种技术。

kubernetes（舵手、飞行员）
	Borg谷歌内部容器管理、编排工具。kubernetes基于Borg
	自动装箱：实现容器的自动部署
	自我修复：kill，restart
	水平扩展
	服务发现
	负载均衡
	自动发布和回滚
	密钥和配置管理
	存储编排
	批量处理执行

kubernetes就是一个集群
	master：API Server，Scheduler，Controller-Manager
	node：kubelet，容器引擎（docker），kube-proxy
	Pod：Label，Label Selector

	有中心节点架构的集群
	在Kubernetes上运行的最小单元是pod，pod可以理解为容器的外壳。pod容器的抽象，一个pod可以有一个或多个容器，这些容器共享一个底层的资源（UTS，Network，IPC），隔离（PID，Mount，User）资源。pod像一个虚拟机，组织容器方法，一个pod共享存储卷，一个pod内的容器都可以访问挂载在pod的存储卷。一般来讲，一个pod内只放一个容器。如果一个容器需要辅助容器（ngix和ngix的日志服务），两者结合很紧密，可以放在一个pod内。
	为了识别pod，需要在pod上附加一些元数据。标签
	laber selector：根据标签过滤符合条件对象的机制；
	master/nodes
	master（管理，2-3个就够了），nodes（work）
	master收到客户请求，检查分析nodes上资源情况，启动容器，image从   下载
	image可以托管在kubernetes上，kebernetes也可托管在kebernetes上
	接收请求的只能是master，通过socket（套接字），master提供的API，API Server，接收请求，解析请求。
	API Server
	scheduler：观测Nodes上计算存储资源，根据请求（容器所需最低资源）
		两级调度：1.先做预选，有多少node符合；2.优选；
	控制器：loop，探测容器（应用）的可用性，容器（应用）出现问题向masters发出请求，重新创建容器（应用）；
	control manager：监控控制器的健康状态，control manager冗余；


01-Devops核心要点及kubernetes架构概述/*}}}*/

02-kubernetes基础概念/*{{{*/
master/node
	master：API Server，Scheduler，Controller-Manager
	node：kubelet，容器引擎（docker），kube-proxy
Pod：Label，Label Selector
	Label:key=value
	Label Selector:
pod用控制器去管理，尽量不要手工去管理；
Pod：
	自主式Pod
	控制器管理的Pod
		ReplicatonController（早期使用）
			监控pod，少了启，多了停；
			滚动更新：
				临时创建（向API Server发请求）新的pod（在更新过程中可临时超出规定数量），更新；
				踢掉一个旧的pod，在创建一个新的pod。
				重复以上过程，直到所有pod都更新完成。
			支持回滚；
		ReplicaSet，不直接使用，它有一个声明的控制器，Deployment；
		Deployment，只能管理无状态的应用，还支持二级控制器HPA（水平pod自动伸缩控制器）；
			HPA，Horizontal Pod Autoscaler，
			服务发现：k8s为同一类pod和使用他的客户端添加了中间层，这个中间层叫service（调度器，名字和ip都不变，不是程序也不是组件，是iptables的dnet规则，控制调度浏览），pod启动后service通过lable关联pod。

		StatefulSet，管理有状态副本集
		DaemonSet，每个node上只运行一个副本
		Job，Ctonjob，运行作业，周期性作业
定义控制器，控制器自动创建pod，手动创建service（只对集群内部服务，可对外部服务），service使用label selector通过label管理pod，k8s内部通过名称访问，所以还需要dns pod（控制器，service，一组dns pod）

dnet：多目标
LBaas：命令即负载均衡，通过命令创建负载均衡
安装完k8s后需要部署一个dns pod（AddOns），
AddOns（基础性架构型的pod）：附件，dns pod，监控

K8S 网络 (节点网络--> service网路（集群网络）--> pod网络)：
	节点网络
	service网路（集群网络）
	pod网络

K8s通信：
	同一个Pod内的多个容器间：lo
	各Pod之间容器的通信：用容器的IP地址直接通信
		不允许广播
		使用Overlay Network（叠加网络），通过隧道的方式转发二层报文，虽然跨主机好像工作在同一个二层网络中一样。可以转发二层报文，也可叠加隧道转发三层报文。在docker 0桥上配置
	Pod与Service之间的通信：Service地址只是node上iptables规则地址，

	每个node（主机）都有iptables规则。
	容器如何访问service ip呢？
		容器将请求发送给网关（docker 0桥地址），网关接收到请求后通过检查node上iptables 规则，知道了service的IP
kube-proxy，每个node都有，是守护进程，随时与API Server通信。
pod发生变化，结果保存在API Server中，API Server生成通知事件，该事件可被任何关联组件接收（其中又kube-proxy），kube-proxy接收到该事件，修改node上的iptables规则。service的管理是通过kube-proxy管理。

etcd：键值存储数据库，用于保存所有对象状态信息，至少三节点。

K8s至少需要5套ca证书（加密、认证）：
1、etcd内部通信；
2、etcd和客户端（API Server）通信，双向验证；
3、API Server和它的客户端通信；
4、API Server和内部集群（node）的kubelet间通信；
5、API Server和内部集群（node）的kube-proxy间通信；

k8s网络功能：
master（至少三节点）
etcd（至少三节点）
node（很多节点）
k8s通过CNI（容器网络接口）插件体系接入外部网络服务解决方案；具体解决方案以容器形式运行在k8s集群上，用容器实现网络功能；
CNI只负责master和etcd的网络，提供网络功能（为pod，service提供ip地址），还有Network Politic功能（隔离不同的pod）；

具体组件：
1、flannel：通过叠加网络实现，只支持网络功能；
2、calico：即支持三层隧道网路也支持bgp协议，可以通过直接路由通信。即支持网络功能，也支持network politic。但是使用难度大。
3、canel：结合了flannel和calico。

k8s名称空间：管理边界，分组不同功用的pod。pod的隔离还是需要network politic实现。
02-kubernetes基础概念/*}}}*/

03-kubeadm初始化Kubernetes集群/*{{{*/
flannel 默认使用地址：10.244.0.0
kubeanetes的部署方式：
1、手动安装各组件，各组件以守护进程的形式运行；复杂、繁琐，全部手动。
2、palybook，将手动工作脚本化；
3、kubeadm工具，在每台主机上部署kubelet和docker，第一个node为master，每个组件（apiserver、schedule、controller-manager、etcd）以static pod方式部署，运行在kubelet上，剩下的节点为node节点。所有主机都有kubelet和docker，node节点上在运行kube-proxy，也是以pod形式运行。flannel也以pod形式运行，但是托管与k8s。其它组件时static pod（apiserver, schedule, controller-manager, etcd, kube-proxy）不受k8s托管。

kops
https://github.com/kubernetes/kops
helps you create, destroy, upgrade and maintain production-grade, highly available, Kubernetes clusters from the command line. AWS (Amazon Web Services) is currently officially supported, with GCE and OpenStack in beta support, and VMware vSphere in alpha, and other platforms planned.

kubeadm
https://github.com/kubernetes/kubeadm
Kubeadm is a tool built to provide best-practice "fast paths" for creating Kubernetes clusters. It performs the actions necessary to get a minimum viable, secure cluster up and running in a user friendly way. Kubeadm's scope is limited to the local node filesystem and the Kubernetes API, and it is intended to be a composable building block of higher level tools.

kubeadm
https://github.com/kubernetes/kubeadm/blob/master/docs/design/design_v1.10.md
iptables.service或firewalld.service禁用。
	1、master, nodes : 安装kubelet, kubeadm, docker
	2、master : kubeadm init
	3、nodes ： kubeadm join


https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/
https://mirrors.aliyun.com/kubernetes/yum/doc/
rpm-package-key.gpg 
yum-key.gpg
https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo



cd  /etc/yum.repo.d
wget https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo
vim kubernetes.repo
[kubernetes]
name=Kubernetes.Repo
baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/
gpgcheck=1
gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg
enabled=1

检查yum源
yum repolist

wget https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg
wget https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg
rpm --import  yum-key.gpg
rpm --import  rpm-package-key.gpg

yum install docker-ce kubelet kubeadm kubectl

1、启动docker服务
vim /usr/lib/systemd/system/docker.service
在ExecStart=/usr/bin/dockerd行前添加：
Environment="HTTPS_PROXY=http://www.ik8s.io:10080"
Environment="NO_PROXY=127.0.0.0/8,172.20.0.0/16"

systemctl daemon-reload
systemctl enable docker.service
systemctl start docker.service
docker info


cat /proc/sys/net/bridge/bridge-nf-call-iptables
cat /proc/sys/net/bridge/bridge-nf-call-ip6tables
确认都为1

rpm -ql kubelet
systemctl enable kubelet

2、启动kubernetes服务

50:58

03-kubeadm初始化Kubernetes集群/*}}}*/

04-kubernetes应用快速入门
05-kubernetes资源清单定义入门
06-Kubernetes Pod控制器应用进阶
07-Kubernetes Pod控制器应用进阶
08-Kubernetes Pod控制器
09-Kubernetes Pod控制器
10-kubernetes Service资源
11-kubernetes ingress及Ingress Controller
12-存储卷
13-kubernetes pv、pvc、configmap和secret
14-kubernetes statefulset控制器
15-kubernetes认证及serviceaccount
16-kubernetes RBAC
17-kubernetes dashboard认证及分级授权
18-配置网络插件flannel
19-基于canel的网络策略
20-调度器、预选策略及优选函数
21-kubernetes高级调度方式
22-容器资源需求、资源限制及HeapSter
23-资源指标API及自定义指标API
24-helm入门
25-创建自定义Chart及部署efk日志系统
26-基于Kubernetes的PaaS概述
七天精进企业篇马哥k8s    end/*}}}*/

